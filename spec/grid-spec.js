// Generated by CoffeeScript 1.7.1
(function() {
  var Grid;

  Grid = DataStructures.Grid;

  describe("new Grid(width, height, blankValue, items)", function() {
    it("should throw an error if either width or height is not an integer greater than 0", function() {
      var e;
      try {
        new Grid(0, 8);
        expect("an error to be thrown").toBe(true);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        new Grid(0, 0);
        expect("an error to be thrown").toBe(true);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        new Grid(8, 0);
        expect("an error to be thrown").toBe(true);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        new Grid(-1, 2);
        expect("an error to be thrown").toBe(true);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        new Grid(8, -7);
        expect("an error to be thrown").toBe(true);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        new Grid(-1, -2);
        return expect("an error to be thrown").toBe(true);
      } catch (_error) {
        e = _error;
      }
    });
    it("should create an array of (width * height) elements", function() {
      var items;
      items = new Grid(2, 3).getItems();
      expect(items).toBeDefined();
      expect(items.length).toBeDefined();
      expect(items.length).toBe(6);
      items = new Grid(4, 4).getItems();
      return expect(items.length).toBe(16);
    });
    it("should instantiate all array items to blankValue", function() {
      var item, items, _i, _j, _k, _len, _len1, _len2, _results;
      items = new Grid(3, 4).getItems();
      for (_i = 0, _len = items.length; _i < _len; _i++) {
        item = items[_i];
        expect(item).toBeNull();
      }
      items = new Grid(4, 5, -1).getItems();
      for (_j = 0, _len1 = items.length; _j < _len1; _j++) {
        item = items[_j];
        expect(item).toBe(-1);
      }
      items = new Grid(41, 52, 'empty').getItems();
      _results = [];
      for (_k = 0, _len2 = items.length; _k < _len2; _k++) {
        item = items[_k];
        _results.push(expect(item).toBe('empty'));
      }
      return _results;
    });
    it("should instantiate the grid with the values in items", function() {
      var grid;
      grid = new Grid(3, 2, false, [3, 5, 7, 6, 5, 4]);
      return expect(grid.getItems()).toEqual([3, 5, 7, 6, 5, 4]);
    });
    return it("shouldn't allow modification of items", function() {
      var blankValue, grid, items, itemsAgain;
      blankValue = -1;
      grid = new Grid(2, 3, blankValue);
      items = grid.getItems();
      items[0] = 'something';
      itemsAgain = grid.getItems();
      return expect(itemsAgain[0]).toBe(blankValue);
    });
  });

  describe("getDimensions", function() {
    return it("should return an object with the height and width of the grid", function() {
      var grid;
      grid = new Grid(2, 3);
      return expect(grid.getDimensions()).toEqual({
        height: 3,
        width: 2
      });
    });
  });

  describe("set(x, y, value)", function() {
    it("should throw error if x is out of bounds", function() {
      var e, grid;
      grid = new Grid(10, 20, -1);
      try {
        grid.set(10, 1, 55);
        expect('x should be a number from 0 to less than the grid width').toBe(false);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        grid.set(-1, 1, 55);
        return expect('x should be a number from 0 to less than the grid width').toBe(false);
      } catch (_error) {
        e = _error;
        return expect(true).toBe(true);
      }
    });
    it("should throw error if y is out of bounds", function() {
      var e, grid;
      grid = new Grid(10, 20, -1);
      try {
        grid.set(1, 21, 55);
        expect('y should be a number from 0 to less than the grid height').toBe(false);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        grid.set(1, -1, 55);
        return expect('y should be a number from 0 to less than the grid height').toBe(false);
      } catch (_error) {
        e = _error;
        return expect(true).toBe(true);
      }
    });
    it("should set the specified value in the specified position", function() {
      var grid, items;
      grid = new Grid(2, 3, -1);
      grid.set(1, 2, 55);
      grid.set(0, 0, 33);
      grid.set(0, 1, 22);
      items = grid.getItems();
      expect(items[5]).toBe(55);
      expect(items[0]).toBe(33);
      return expect(items[2]).toBe(22);
    });
    return it("should not change the values in the other positions", function() {
      var grid, i, item, _i, _len, _ref, _results;
      grid = new Grid(2, 3, -1);
      grid.set(1, 2, 55);
      grid.set(0, 0, 33);
      grid.set(1, 1, 22);
      _ref = grid.getItems();
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        item = _ref[i];
        if (i !== 5 && i !== 0 && i !== 3) {
          _results.push(expect(item).toBe(-1));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    });
  });

  describe("get(x, y)", function() {
    it("should throw error if x is out of bounds", function() {
      var e, grid;
      grid = new Grid(10, 20, -1);
      try {
        grid.get(10, 1);
        expect('x should be a number from 0 to less than the grid width').toBe(false);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        grid.get(-1, 1);
        return expect('x should be a number from 0 to less than the grid width').toBe(false);
      } catch (_error) {
        e = _error;
        return expect(true).toBe(true);
      }
    });
    it("should throw error if y is out of bounds", function() {
      var e, grid;
      grid = new Grid(10, 20, -1);
      try {
        grid.get(1, 21);
        expect('y should be a number from 0 to less than the grid height').toBe(false);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        grid.get(1, -1);
        return expect('y should be a number from 0 to less than the grid height').toBe(false);
      } catch (_error) {
        e = _error;
        return expect(true).toBe(true);
      }
    });
    return it("should get the item at the specified position", function() {
      var grid;
      grid = new Grid(5, 6, false);
      grid.set(2, 3, 'hello');
      grid.set(3, 4, 'world');
      expect(grid.get(2, 3)).toBe('hello');
      return expect(grid.get(3, 4)).toBe('world');
    });
  });

  describe("find(item)", function() {
    return it("should return an array of position {x, y} arrays", function() {
      var grid;
      grid = new Grid(3, 3, false, [4, 2, false, 7, 8, 9, false, 2, 3]);
      expect(grid.find(7)).toEqual([
        {
          x: 0,
          y: 1
        }
      ]);
      expect(grid.find(false)).toEqual([
        {
          x: 2,
          y: 0
        }, {
          x: 0,
          y: 2
        }
      ]);
      expect(grid.find(2)).toEqual([
        {
          x: 1,
          y: 0
        }, {
          x: 1,
          y: 2
        }
      ]);
      return expect(grid.find(999)).toEqual([]);
    });
  });

  describe("getNeighbours(x, y)", function() {
    it("should throw error if x is out of bounds", function() {
      var e, grid;
      grid = new Grid(10, 20, -1);
      try {
        grid.getNeighbours(10, 1);
        expect('x should be a number from 0 to less than the grid width').toBe(false);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        grid.getNeighbours(-1, 1);
        return expect('x should be a number from 0 to less than the grid width').toBe(false);
      } catch (_error) {
        e = _error;
        return expect(true).toBe(true);
      }
    });
    it("should throw error if y is out of bounds", function() {
      var e, grid;
      grid = new Grid(10, 20, -1);
      try {
        grid.getNeighbours(1, 21);
        expect('y should be a number from 0 to less than the grid height').toBe(false);
      } catch (_error) {
        e = _error;
        expect(true).toBe(true);
      }
      try {
        grid.getNeighbours(1, -1);
        return expect('y should be a number from 0 to less than the grid height').toBe(false);
      } catch (_error) {
        e = _error;
        return expect(true).toBe(true);
      }
    });
    it("should get the specified cell's eight neighbours when they all exist", function() {
      var grid, neighbours;
      grid = new Grid(3, 3, null, ['nw', 'n', 'ne', 'w', 'CENTER', 'e', 'sw', 's', 'se']);
      neighbours = grid.getNeighbours(1, 1);
      expect(neighbours.topLeft).toEqual({
        x: 0,
        y: 0,
        item: 'nw'
      });
      expect(neighbours.top).toEqual({
        x: 1,
        y: 0,
        item: 'n'
      });
      expect(neighbours.topRight).toEqual({
        x: 2,
        y: 0,
        item: 'ne'
      });
      expect(neighbours.left).toEqual({
        x: 0,
        y: 1,
        item: 'w'
      });
      expect(neighbours.right).toEqual({
        x: 2,
        y: 1,
        item: 'e'
      });
      expect(neighbours.bottomLeft).toEqual({
        x: 0,
        y: 2,
        item: 'sw'
      });
      expect(neighbours.bottom).toEqual({
        x: 1,
        y: 2,
        item: 's'
      });
      return expect(neighbours.bottomRight).toEqual({
        x: 2,
        y: 2,
        item: 'se'
      });
    });
    it("should get undefined for three neighbours where the specified cell is on an edge", function() {
      var grid, items, neighbours;
      items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3];
      grid = new Grid(3, 4, null, items);
      neighbours = grid.getNeighbours(0, 1);
      expect(neighbours.topLeft).toBeUndefined();
      expect(neighbours.top).toEqual({
        x: 0,
        y: 0,
        item: 1
      });
      expect(neighbours.topRight).toEqual({
        x: 1,
        y: 0,
        item: 2
      });
      expect(neighbours.left).toBeUndefined();
      expect(neighbours.right).toEqual({
        x: 1,
        y: 1,
        item: 5
      });
      expect(neighbours.bottomLeft).toBeUndefined();
      expect(neighbours.bottom).toEqual({
        x: 0,
        y: 2,
        item: 7
      });
      return expect(neighbours.bottomRight).toEqual({
        x: 1,
        y: 2,
        item: 8
      });
    });
    return it("should get undefined for five neighbours where the specified cell is on a corner", function() {
      var grid, items, neighbours;
      items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3];
      grid = new Grid(3, 4, null, items);
      neighbours = grid.getNeighbours(2, 3);
      expect(neighbours.topLeft).toEqual({
        x: 1,
        y: 2,
        item: 8
      });
      expect(neighbours.top).toEqual({
        x: 2,
        y: 2,
        item: 9
      });
      expect(neighbours.topRight).toBeUndefined();
      expect(neighbours.left).toEqual({
        x: 1,
        y: 3,
        item: 2
      });
      expect(neighbours.right).toBeUndefined();
      expect(neighbours.bottomLeft).toBeUndefined();
      expect(neighbours.bottom).toBeUndefined();
      return expect(neighbours.bottomRight).toBeUndefined();
    });
  });

}).call(this);
