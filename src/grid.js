// Generated by CoffeeScript 1.7.1
(function() {
  var global, gridModule;

  gridModule = function() {
    var Grid;
    Grid = function(width, height, blankValue, seedItems) {
      var getIndexFromXY, getXYFromIndex, i, isValidPosition, itemCount, items, self, tryGet, _i;
      if (blankValue == null) {
        blankValue = null;
      }
      if (width < 1 || height < 1) {
        throw 'width and height both need to be greater than 0';
      }
      self = this;
      width = width;
      height = height;
      itemCount = width * height;
      blankValue = blankValue;
      items = null;
      if (seedItems != null) {
        items = seedItems;
      } else {
        items = [];
        for (i = _i = 0; 0 <= itemCount ? _i < itemCount : _i > itemCount; i = 0 <= itemCount ? ++_i : --_i) {
          items[i] = blankValue;
        }
      }
      getIndexFromXY = function(x, y) {
        return (y * width) + x;
      };
      getXYFromIndex = function(index) {
        var x, y;
        x = index % width;
        y = (index - x) / width;
        return {
          'x': x,
          'y': y
        };
      };
      isValidPosition = function(x, y) {
        return ((0 <= x && x < width)) && ((0 <= y && y < height));
      };
      tryGet = function(x, y) {
        if (!isValidPosition(x, y)) {
          return void 0;
        }
        return {
          'x': x,
          'y': y,
          'item': self.get(x, y)
        };
      };
      self.getDimensions = function() {
        return {
          'height': height,
          'width': width
        };
      };
      self.getItems = function() {
        var item, _j, _len, _results;
        _results = [];
        for (_j = 0, _len = items.length; _j < _len; _j++) {
          item = items[_j];
          _results.push(item);
        }
        return _results;
      };
      self.set = function(x, y, value) {
        if ((typeof x !== 'number') || !((0 <= x && x < width))) {
          throw 'x should be from 0 to width-1';
        }
        if ((typeof y !== 'number') || !((0 <= y && y < height))) {
          throw 'y should be from 0 to height-1';
        }
        return items[getIndexFromXY(x, y)] = value;
      };
      self.get = function(x, y) {
        if ((typeof x !== 'number') || !((0 <= x && x < width))) {
          throw 'x should be from 0 to width-1';
        }
        if ((typeof y !== 'number') || !((0 <= y && y < height))) {
          throw 'y should be from 0 to height-1';
        }
        return items[getIndexFromXY(x, y)];
      };
      self.find = function(itemToFind) {
        var item, _j, _len, _results;
        _results = [];
        for (i = _j = 0, _len = items.length; _j < _len; i = ++_j) {
          item = items[i];
          if (item === itemToFind) {
            _results.push(getXYFromIndex(i));
          }
        }
        return _results;
      };
      self.getNeighbours = function(x, y) {
        if ((typeof x !== 'number') || !((0 <= x && x < width))) {
          throw 'x should be from 0 to width-1';
        }
        if ((typeof y !== 'number') || !((0 <= y && y < height))) {
          throw 'y should be from 0 to height-1';
        }
        return {
          topLeft: tryGet(x - 1, y - 1),
          top: tryGet(x, y - 1),
          topRight: tryGet(x + 1, y - 1),
          left: tryGet(x - 1, y),
          right: tryGet(x + 1, y),
          bottomLeft: tryGet(x - 1, y + 1),
          bottom: tryGet(x, y + 1),
          bottomRight: tryGet(x + 1, y + 1)
        };
      };
    };
    return Grid;
  };

  global = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (global.DataStructures == null) {
    global.DataStructures = {};
  }

  global.DataStructures.Grid = gridModule();

}).call(this);
